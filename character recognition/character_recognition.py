# -*- coding: utf-8 -*-
"""character_recognition

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12cF8mHUI9r22Bhy8V6B29Gn2p1jTibAe
"""

!wget https://www.dropbox.com/s/t4pzwpvrzneb190/training_set.zip
!wget https://www.dropbox.com/s/i37jfni3d29raoc/test_set.zip

!unzip training_set.zip
!unzip test_set.zip

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import matplotlib.pyplot as plt
import matplotlib.image as npimg
img=npimg.imread('/content/test_set/test_set/cats/cat.4001.jpg')
imgplot= plt.imshow(img)
plt.show()

img=npimg.imread('/content/test_set/test_set/dogs/dog.4003.jpg')
imgplot= plt.imshow(img)
plt.show()

import tensorflow
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Conv2D,Flatten,Dropout, MaxPooling2D, Activation
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as npimg

# Commented out IPython magic to ensure Python compatibility.
!wget https://www.dropbox.com/s/t4pzwpvrzneb190/training_set.zip
!wget https://www.dropbox.com/s/i37jfni3d29raoc/test_set.zip
!unzip training_set.zip
!unzip test_set.zip
# %pylab inline
import matplotlib.pyplot as plt
import matplotlib.image as npimg
img=npimg.imread('/content/test_set/test_set/cats/cat.4001.jpg')
imgplot= plt.imshow(img)
plt.show()

import tensorflow
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Conv2D,Flatten,Dropout, MaxPooling2D, Activation
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as npimg

img_width, img_height = 150,150
train_data_dir=r"/content/training_set/training_set"
validation_data_dir=r"/content/test_set/test_set"
nb_train_set=100
nb_validate_set=100
epoch=20
batch_size= 20

import tensorflow.keras.backend as k
if k.image_data_format()=='channels_first':
  input_shape=(3, img_width, img_height)
else:
    input_shape=(img_width, img_height, 3)

train_datagen = ImageDataGenerator(rescale=1. /255, shear_range=0.2 , zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1. /255)
train_generator = train_datagen.flow_from_directory(train_data_dir,target_size=(img_width,img_height), batch_size=batch_size, class_mode='binary',classes=['cats','dogs'])
validation_generator = test_datagen.flow_from_directory(validation_data_dir,target_size=(img_width, img_height), batch_size=batch_size, class_mode='binary')
plt.figure(figsize=(12,12))
for i in range(0,15):
  plt.subplot(5,3, i+1)
  for x_batch, y_batch in train_generator:
    image = x_batch[0]
    plt.imshow(image)
    break

plt.tight_layout()
plt.show

model=sequential()
model.add(conv2D(64,(3,3), input_shape=input_shape))

model.add(Activation('relu'))
model.add(MaxPoolin2D(pool_size(2,2)))

model.add(Flatten())
model.add(Dense(54))

model.add(Activation('relu'))
model.add(Dense(1))
model.add(Activation('sigmoid'))
model.summary()

model.compile(optimizer='rmsprop', loss='binary_crossentropy',matrics=['accuracy'])
model.summary()

training = model.fit(train_generator,steps_per_epoch=nb_train_sample, epochs=epochs, validation_data=validation_generator,validation_steps=nb_validation_samples)

import matplotlib.pyplot as plt
# %matplotlib inline
print(training.history.keys())
plt.plot(training.history['accuracy'])
plt.plot(training.history['val_accuracy'])
plt.title('model_accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc= 'upper_left')
plt.show()

plt.plot(training.history['loss'])
plt.plot(training.history['val_loss'])
plt.title('model_loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc= 'upper_left')
plt.show()

from tensorflow.keras.preprocessing import image
import numpy as np
img_pred = np.load_img("/content/test_set/test_set/dogs/dog.4003.jpg",target_size=(150,150))

img_pred = image.img_to_array(img_pred)
img_pred = np.expand_dims(img_pred, axis=0)

rslt = model.predict(img_pred)
print(rslt)
if rslt[0][0] == 1:
  prediction = "Dog"

else:
    prediction = "cat"
print('prediction: ', prediction)

img=npimg.imread('/content/test_set/test_set/cats/cat.4002.jpg', target_size=(150,150))
imgplot =plt.imshow(img)
plt.show()